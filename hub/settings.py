"""
Django settings for hub project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Evaluate if the application is running in a test environment
is_testing: bool = (
    "test" in sys.argv
    or "pytest" in sys.argv
    or os.getenv("RUNNING_TESTS") == "1"  # Ensure comparison is always with a string
    or os.getenv("DJANGO_SETTINGS_MODULE") == "hub.settings.test"
    or os.getenv("DJANGO_SETTINGS_MODULE") == "user.settings.test"
    or os.getenv("DJANGO_SETTINGS_MODULE") == "recetario.settings.test"
    or os.environ.get("PYTEST_CURRENT_TEST") is not None
    or os.getenv("ENVIRONMENT") == "test"
)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_FRONTEND_URL: str = (
    os.getenv("DJANGO_STATIC_FRONTEND_URL") or "http://kubernetes.docker.internal"
)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-mfqy7^=&$q%k!2ec_98w7quqk!2yy!wbb6z^h1th0c02io*9n$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    os.getenv("DJANGO_STATIC_FRONTEND_URL", "")
    .replace("http://", "")
    .replace("https://", ""),
    "recetascocol.com.ar",
    "www.recetascocol.com.ar",
    "kubernetes.docker.internal",
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "corsheaders",
    "rest_framework",
    "users",
    "recetario",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hub.urls"
CORS_ALLOWED_ORIGINS = [
    STATIC_FRONTEND_URL,
    "http://kubernetes.docker.internal",
    "http://localhost:3000",
]

CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-csrftoken",
    "credentials",
    "accept",
    "accept-encoding",
    "origin",
    "user-agent",
]

CORS_ALLOW_CREDENTIALS = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hub.wsgi.application"
DATABASES_PATH: str = os.getenv("DJANGO_DATABASES_PATH") or str(BASE_DIR / "db.sqlite3")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "hub",
        "USER": "admin",
        "PASSWORD": "",
        "HOST": "database-recetario1-instance-1.c8zegoa48aj2.us-east-1.rds.amazonaws.com",
        "PORT": "3306",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "users.authentication.JWTAuthentication",
    ],
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

AUTH_USER_MODEL = "users.User"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "mail_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "logs/email_errors.log",
        },
        "console": {
            "level": "WARNING",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django.core.mail": {
            "handlers": ["mail_file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
        "django.db.backends": {  # Agrega este logger para depurar consultas SQL
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django": {  # Agrega este logger para capturar m√°s detalles generales
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}

EMAIL_BACKEND: str
EMAIL_HOST: str
EMAIL_HOST_PASSWORD: str
EMAIL_HOST_USER: str
EMAIL_PORT: int
EMAIL_USE_TLS: bool
if is_testing:
    EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
    EMAIL_HOST = ""
    EMAIL_PORT = 0
    EMAIL_USE_TLS = False
    EMAIL_HOST_USER = ""
    EMAIL_HOST_PASSWORD = ""
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.zoho.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = "info@recetascocol.com.ar"
    EMAIL_HOST_PASSWORD = "7iM1BUBkkW06"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}

# Usar DummyCache en tests para deshabilitar el cache real
if is_testing:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }

print(f"[SETTINGS] ENV is_testing: {is_testing}")
